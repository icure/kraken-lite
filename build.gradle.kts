@Suppress("UnstableApiUsage")
configurations {
	all {
		exclude(group = "log4j", module = "log4j")
		resolutionStrategy {
			failOnVersionConflict()
		}
	}
}

subprojects {
	@Suppress("UnstableApiUsage")
	configurations {
		all {
			exclude(group = "log4j", module = "log4j")
			resolutionStrategy {
				failOnVersionConflict()

				force(liteLibs.kotestFrameworkApi)
				force(liteLibs.logbackClassic)
				force(liteLibs.logbackCore)
				force(liteLibs.micrometerObservation)
				force(liteLibs.slf4jApi)

				force(coreLibs.apacheCommonsCodec)
				force(coreLibs.apacheCommonsLang3)
				force(coreLibs.apacheCommonsText)
				force(coreLibs.asyncJacksonHttpClient)
				force(coreLibs.byteBuddy)
				force(coreLibs.checkerFramework)
				force(coreLibs.commonsCodec)
				force(coreLibs.commonsCodec)
				force(coreLibs.commonsIO)
				force(coreLibs.googleErrorProneAnnotations)
				force(coreLibs.googleGson)
				force(coreLibs.googleHttpClient)
				force(coreLibs.googleHttpClientGson)
				force(coreLibs.googleOAuthLibraryCredential)
				force(coreLibs.googleOAuthLibraryHttp)
				force(coreLibs.grpcApi)
				force(coreLibs.grpcContext)
				force(coreLibs.guava)
				force(coreLibs.guavaFailureAccess)
				force(coreLibs.jacksonAnnotations)
				force(coreLibs.jacksonCore)
				force(coreLibs.jacksonDatabind)
				force(coreLibs.jacksonDataformatYaml)
				force(coreLibs.jacksonJsr310)
				force(coreLibs.jacksonKotlin)
				force(coreLibs.jacksonSmile)
				force(coreLibs.jakartaValidation)
				force(coreLibs.jetBrainAnnotations)
				force(coreLibs.julToSlf4j)
				force(coreLibs.junitBom)
				force(coreLibs.junitJupiterApi)
				force(coreLibs.junitPlatformEngine)
				force(coreLibs.junitPlatformLauncher)
				force(coreLibs.junitPlatformSuiteApi)
				force(coreLibs.jupiter)
				force(coreLibs.kotlinReflect)
				force(coreLibs.kotlinStandardLibrary)
				force(coreLibs.kotlinStandardLibraryJdk7)
				force(coreLibs.kotlinStandardLibraryJdk8)
				force(coreLibs.kotlinxCoroutinesBom)
				force(coreLibs.kotlinxCoroutinesCore)
				force(coreLibs.kotlinxCoroutinesCoreJvm)
				force(coreLibs.kotlinxCoroutinesDebug)
				force(coreLibs.kotlinxCoroutinesJdk8)
				force(coreLibs.kotlinxCoroutinesReactor)
				force(coreLibs.kotlinxCoroutinesTest)
				force(coreLibs.kotlinxIoCore)
				force(coreLibs.kotlinxSerializationBom)
				force(coreLibs.kotlinxSerializationCore)
				force(coreLibs.kotlinxSerializationCoreJvm)
				force(coreLibs.kotlinxSerializationJson)
				force(coreLibs.kotlinxSerializationJsonJvm)
				force(coreLibs.mockk)
				force(coreLibs.mockkJvm)
				force(coreLibs.nettyBuffer)
				force(coreLibs.nettyCodec)
				force(coreLibs.nettyCommon)
				force(coreLibs.nettyHandler)
				force(coreLibs.nettyTransport)
				force(coreLibs.reactiveStreams)
				force(coreLibs.reactorCore)
				force(coreLibs.reactorNetty)
				force(coreLibs.snakeYaml)
				force(coreLibs.springAop)
				force(coreLibs.springBeans)
				force(coreLibs.springBootAutoConfigure)
				force(coreLibs.springBootSecurity)
				force(coreLibs.springBootWebflux)
				force(coreLibs.springContext)
				force(coreLibs.springCore)
				force(coreLibs.springExpression)
				force(coreLibs.springMessaging)
				force(coreLibs.springWeb)
				force(coreLibs.springWebflux)
				force(coreLibs.springdocCommon)

				force("io.netty:netty-resolver:4.1.122.Final")
 				force("io.netty:netty-resolver-dns-native-macos:4.1.122.Final")
				force("com.google.devtools.ksp:symbol-processing-api:2.2.0-2.0.2")
			}
		}
	}
}